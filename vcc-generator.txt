case 'vccgen': {
 let [type, jumlah] = args

 if (!type || !jumlah) {
 return conn.sendMessage(m.chat, {
 text: `Contoh penggunaan:\nccgen Visa 5\n\nPilihan type:\n1. Visa\n2. MasterCard\n3. American Express\n4. JCB\n\nJumlah: 5 - 20`
 }, { quoted: m })
 }

 let allowedTypes = ['Visa', 'MasterCard', 'American Express', 'JCB']
 if (!allowedTypes.includes(type)) {
 return conn.sendMessage(m.chat, {
 text: `Tipe kartu tidak valid.\nGunakan salah satu dari:\n${allowedTypes.join('\n')}`
 }, { quoted: m })
 }

 let jumlahNum = parseInt(jumlah)
 if (isNaN(jumlahNum) || jumlahNum < 5 || jumlahNum > 20) {
 return conn.sendMessage(m.chat, {
 text: `Jumlah kartu harus antara 5 sampai 20.`
 }, { quoted: m })
 }

 let encodedType = encodeURIComponent(type)
 let url = `https://backend.lambdatest.com/api/dev-tools/credit-card-generator?type=${encodedType}&no-of-cards=${jumlahNum}`

 try {
 let { data } = await axios.get(url)
 if (!Array.isArray(data) || data.length === 0) {
 return conn.sendMessage(m.chat, { text: 'Gagal mendapatkan respon.' }, { quoted: m })
 }

 let hasil = `*Generated ${type} Credit Cards (${jumlahNum}) :*\n\n`
 data.forEach((card, i) => {
 hasil += `*${i + 1}.* ${card.name}\n• Number : ${card.number}\n• CVV : ${card.cvv}\n• Expired : ${card.expiry}\n\n`
 })

 conn.sendMessage(m.chat, { text: hasil.trim() }, { quoted: m })

 } catch (e) {
 console.log(e)
 conn.sendMessage(m.chat, { text: 'Error, coba lagi nanti.' }, { quoted: m })
 }
}
break